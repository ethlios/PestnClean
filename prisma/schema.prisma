// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id
  email        String         @unique
  name         String?
  img          String?
  rule         String?
  product      Product[]
  cart         Cart[]
  order        Order[]
  emailkm      Email[]
  address      String?
  district     String?
  Ward         String?
  city         String?
  phone        String?
  avatar       String?
  discount     Discount[]
  comment      CommentBlogs[]
  imgWork      ImgWork[]
  notification Notification[]
}

model Cart {
  id          Int     @id @default(autoincrement())
  author      User    @relation(fields: [authorId], references: [id])
  authorId    String
  title       String?
  description String?
  price       Int?
  img         String?
  quantity    Int?
  code        String?
}

model Email {
  id       Int     @id @default(autoincrement())
  author   User    @relation(fields: [authorId], references: [id])
  authorId String
  email    String?
}

model Product {
  id         Int            @id @default(autoincrement())
  author     User           @relation(fields: [authorId], references: [id])
  authorId   String
  title      String?
  desHead    String?
  detail     String?
  price      Int?
  comments   Comments[]
  Image      String[]
  code       String?
  category1   String?
  category2   String?
  category3   String?
  status     String?
  priceSales Int?
  weight     String?
  expiry     String?
  new        Boolean?
  box        String?
  package    String?
  pieces     String?
  bag        String?
  plate      String?
  quantity   Int?
}


model CommentBlogs {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  blogName  String?
  message   String?
  img       String?
  name      String?
  createdAt DateTime @default(now())
  userId    String?
  type      String?
  email     String?
  avatar    String?
}

model Comments {
  id        Int      @id @default(autoincrement())
  product   Product? @relation(fields: [productId], references: [id]) // A comment can have one post
  productId Int?
  message   String?
  img       String?
  name      String?
  createdAt DateTime @default(now())
  email     String?
}


model Order {
  id            Int      @id @default(autoincrement())
  author        User     @relation(fields: [authorId], references: [id])
  authorId      String
  userId        String?
  name          String?
  address       String?
  city          String?
  district      String?
  Ward          String?
  phone         String?
  email         String?
  message       String?
  product       String?
  orderAt       DateTime @default(now())
  code          String?
  status        String?
  payment       String?
  paymentStatus String?
}

model Discount {
  id          Int       @id @default(autoincrement())
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  code        String?
  percent     Int?
  name        String?
  dateStart   DateTime?
  dateEnd     DateTime?
  description String?
}

model ImgWork {
  id       Int     @id @default(autoincrement())
  author   User    @relation(fields: [authorId], references: [id])
  authorId String
  img      String?
  type     String?
}

model Notification {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  message   String?
  createdAt DateTime @default(now())
}
